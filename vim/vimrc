" ##############################################################################
" ##############################################################################
" Designed for vim 8+.  

" This vimrc is based off of rwxrob's vimrc with influence from Max Cantor's
" presentation.

" rwxrob references
" https://github.com/rwxrob/dot/blob/main/vim/.vimrc
" See https://youtu.be/3mRBUUTL2Uo for rwxrob's breakdown of his vimrc
 
" Max Cantor reference
" how to do 90% of what plugins do with just vim
" https://www.youtube.com/watch?v=XA2WjJbmmoM

" ##############################################################################
" ##############################################################################
" See `:help vimrc` for information on vimrc files

" Tip for navigating the help file. `ctrl-]` will take you to the link under the
" cursor, and `ctrl-o` will take you back.

" ##############################################################################
" ##############################################################################
" setups up other vim configs that can be used, see rwxrob video(around
" 3.20.00ish)

" set rtp^=~/.vimpersonal
" set rtp^=~/.vimprivate
" set rtp^=~/.vimwork

" ##############################################################################
" ##############################################################################
" colorscheme

colorscheme elflord

" Sets the color of the colorcolumn
" :hi ColorColumn ctermbg=lightGreen guibg=lightgrey

" make ~ (it represents blank lines, as in nothing in the file) effectively invisible
" highlight NonText guifg=bg

"this turns on 24 bit colors
set termguicolors   

" sets background to dark mode
set background=dark

" rwxrob custom ruler

" set ruf=%30(%=%#LineNr#%.50F\ [%{strlen(&ft)?&ft:'none'}]\ %l:%c\ %p%%%)

" ##############################################################################
" ##############################################################################
" settings

" command history
set history=100

" prevents truncated yanks, deletes, etc. (super important if using the vim
" buffers to paste stuff to a different file)
set viminfo='20,<1000,s1000

" makes it to avoid most of the 'Hit Enter ...' type messages
set shortmess=aoOtTI

" stops vim from silently messing with files that it shouldn't. ie messes
" with line endings(see rwxrobs video for more info)
set nofixendofline

" search wrap around file(ie. if you start your search half way down the file,
" it will go to the top and continue searching
set wrapscan

" ascii friendly charactors for when you want to see invisible charactors
set listchars=space:*,trail:*,nbsp:*,extends:>,precedes:<,tab:\|>
" set list

" turns off automatic folding
set foldmethod=manual

" if some folds where folded this will open them
 set nofoldenable

" Sets vi compatible mode to off (just use nvi for vi mode)
set nocompatible


" automatically indent new lines
set autoindent

" indenting for wrapped lines
set breakindent

" automatically write files when changing when multiple files are open
set autowrite

" shows the commands your using in the bottom tray thing
set showcmd

" Activates line numbers
set number

"set or disables relative line numbers
set norelativenumber

" turn col and row position on in the bottom right
set ruler "

" Show insert, replace or visual mode at the bottom when you're in that mode
set showmode

" need to add explanation to what this is
set tabstop=2

" disable visual bell
set t_vb=

" softtabstop, 
set softtabstop=2

" sets shiftwidth width (when you are in normal mode press >> or << and it will
" indent or go back this many spaces)
set shiftwidth=2

" does the smart indenting, see :h smartindent
set smartindent

" sets smarttab, when smarttab is on it inserts blanks(which will be equal to whatever expand tab is
" set to) according to shiftwidth.
set smarttab

" mark trailing spaces as errors
" match IncSearch '\s\+$'

" Sets how wide inserted text can be (ie when lines will be wrapped)
set textwidth=80

" Sets a colored column in the vim terminal(for example you can set it to see where
" your textwidth ends) the +4 setting uses the textwidth then
" +4 to indicate where the column should go(it's +4 here and not +1 because line
" numbers are turned on, and they take up 3 columns)
" set colorcolumn=+4

" Sets tabs to equivelent amount of spaces
set expandtab

" makes an underline on what line the cursor is on
" set cursorline

" turn on default spell checking
" set spell

" disable spellcapcheck(it checks for a capital as the next word to find the
" end of a sentence) see :h spellcapcheck
set spellcapcheck=

" risky, but keeps your files and folders cleaner
set nobackup
set noswapfile
set nowritebackup

" no sure what this does, neither does rwxrob. He thought it had something to
" do with tmux window titles or something. Leaving it in
" I believe this just sets the icon text for the window, only works on x11
" gui's. the icon text uses the file name unless you set iconstring to something
" non empty
set icon

" sets how much room the cursor has to move  up and down the screen
set scrolloff=8

" set highlight search hits
set hlsearch

" displays the match when your only partially through typing it
set incsearch

" linebreak, if on wraps can occur at whatever breakat is
" set linebreak

" turns bracket matching off
" let g:loaded_matchparen=1

" cursor quickly jumps to a matching bracket
" set showmatch

" rwxrob says plugins need this, also Max Cantor as well
" if has("syntax")
"   syntax enable
" endif
" I don't know why rob has the conditional, it seems others are just enabling
" in. leaving the above in, in case something happens in the future and i did
" need the conditional
syntax enable

" faster scrolling
set ttyfast

" Sets up a way to do fuzzy finding
" **(as in star star) tells vim that when you look for a file search through every
" subdirectory, and search through every subdirectory of every subdirectory, see
" max cantor's presentation
set path+=**

" Display all matching files when we tab complete, apparently this can be
" configured several different ways
set wildmenu

" :h ins-completion for the auto complete man page

" ##############################################################################
" ##############################################################################
" Plugins

" You can enable loading the plugin files for specific file types with: >
filetype plugin on

" Rob recommeds to use the Plug plugin manager, as it doesn't mess around with
" your stuff, and it helps to keep everything clean and separated. see his video
" for more

" start of plug plugin manager stuff
" autoload plug if not present
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

" start of plugins section
call plug#begin('~/.vim/plugged')

Plug 'https://github.com/tpope/vim-surround'

Plug 'https://github.com/tpope/vim-repeat'

call plug#end()


" see :h write-filetype-plugin to see how to
" write my own filetype plugins, also see :h write-plugin

" ##############################################################################
" ##############################################################################
" key maps

" set mapleader
let mapleader=","

" maps Y to act the same way as D and C (in that it does the action to the end of line)
map Y y$

" mapping for function keys, the ! at the end before <CR> is to make it so you
" can turn the thing on and off
map <F1> :set number!<CR>
map <F2> :set relativenumber!<CR>
set pastetoggle=<F3>   " not sure why its done this way, i just copied rwxrob
map <F4> :set list!<CR>
map <F5> :set cursorline!<CR>
map <F6> :set nohlsearch!<CR>
map <F7> :set spell!<CR>
" map <F12> :set fdm=indent<CR>

" ##############################################################################
" ##############################################################################
" snippets

" edit vimrc
nnoremap ,evim :e $HOME/.vim/vimrc<CR>

" source vimrc
nnoremap ,svim :source $HOME/.vim/vimrc<CR>

" reads in html template
nnoremap ,html :-1read $HOME/.vim/snippets/html<CR>8j3wa

" ##############################################################################
" endoffile
" ##############################################################################
