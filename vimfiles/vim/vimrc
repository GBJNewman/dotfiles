" ##############################################################################
" Designed for vim 8+.


" ##############################################################################
" Plugin section

" autoload plug pluggin manager if not present
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
endif

call plug#begin('~/.vim/plugged') " initilise vim-plug and tell it where to install plugins

"Plug 'https://github.com/tpope/vim-surround'

"Plug 'https://github.com/tpope/vim-repeat'

Plug 'https://github.com/preservim/nerdtree' " nerdtree file navigator

"Plug 'https://github.com/mattn/emmet-vim'

call plug#end() " finalize plugin installation and loading

" ##############################################################################
" NERDTree settings

let NERDTreeStatusline='NERDTree - Press ? for help' " set a text message in the status line

" map l to open file or directory (same as enter)
autocmd FileType nerdtree nmap <buffer> l <CR>

" map h to go up one directory
autocmd FileType nerdtree nmap <buffer> h :NERDTreeUp<CR>

" this sets so vim exits if NERDTree is the only window/tab remaining open
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif


" ##############################################################################
" colorscheme / theme

"set termguicolors " turns on 24 bit colors. there is a conflict with gruvbox transparancy when this is set
"set t_Co=256 " deprecated way of telling vim to use 256 colors
set background=dark
colorscheme elflord_gbjn

" ##############################################################################
" Custom Statusline

set laststatus=2 " set statusline to always show, even if not more than one window open

" dictionary to convert mode() output to something more readable
let g:modedisplay={
    \ 'n'  : 'Normal',
    \ 'no' : 'Normal·Operator Pending',
    \ 'v'  : 'Visual',
    \ 'V'  : 'V·Line',
    \ '^V' : 'V·Block',
    \ 's'  : 'Select',
    \ 'S'  : 'S·Line',
    \ '^S' : 'S·Block',
    \ 'i'  : 'Insert',
    \ 'R'  : 'Replace',
    \ 'Rv' : 'V·Replace',
    \ 'c'  : 'Command',
    \ 'cv' : 'Vim Ex',
    \ 'ce' : 'Ex',
    \ 'r'  : 'Prompt',
    \ 'rm' : 'More',
    \ 'r?' : 'Confirm',
    \ '!'  : 'Shell',
    \ 't'  : 'Terminal'
    \}

set statusline+=%F " add full filepath of opened file to statusline

set statusline+=\ \-\ filetype:%Y " add filetype

set statusline+=%= " add a left right split point

"set statusline+=\ mode:%{toupper(g:modedisplay[mode()])} " add current mode

"set statusline+=\ %p%% "add percentage through file in lines

set statusline+=\line\ %l " add line number

set statusline+=\:col\ %v " add column number

" ##############################################################################
" misc settings

set nocompatible " Sets vi compatible mode to off (just use nvi for vi mode)

silent! source $VIMRUNTIME/defaults.vim " ensures that Vim's default settings are loaded quietly without error messages. will restore cursor position

filetype plugin on " enable loading of file type specific plugins and settings

set history=1000 " command history, vim default is 50

set viminfo='20,<1000,s1000 " persistant command history, search history, and registers across sessions

set shortmess=aoOtTI " makes it avoid most of the 'Hit Enter ...' type messages

set nofixendofline " stops vim from silently messing with files that it shouldn't

set wrapscan " search wraps from bottom of file back to the top

set listchars=space:·,trail:•,nbsp:*,extends:>,precedes:<,tab:\|> " ascii friendly invisible characters

set list " turns on invisible characters

set foldmethod=manual " turns off automatic folding

set nofoldenable " if some folds where folded this will open them

set autoindent " automatically indent new lines

set breakindent " indenting for wrapped lines

set autowrite " automatically save the current file when switching between files

set showcmd " shows the commands your using in the bottom tray

set number " Sets line numbers

set cursorline " sets the cursor line to highlight

set cursorlineopt=number " changes cursor line to only highlight numbers

set norelativenumber " disables relative line numbers

set showmode " Shows current mode in tray

set t_vb= " disable visual bell

set smarttab " Make Tab key respect shiftwidth for indentation and tabstop elsewhere

set tabstop=4 " sets the visual representation of tabwidth

set softtabstop=4 " softtabstop, 

set expandtab " Sets tabs to equivelent amount of spaces

set shiftwidth=4 " sets shiftwidth width (when you are in normal mode press >> or << and it will indent or go back this many spaces)

set smartindent " Sets smart indenting

"match IncSearch '\s\+$' " mark trailing spaces as errors

"set textwidth=80 " Sets how wide inserted text can be (ie when horizontal lines will be wrapped)

"set colorcolumn=+4 " Sets a colored column in the vim terminal

set timeout timeoutlen=2000 " set time out length in milliseconds(ie. for leaderkey timeout)

"set spell " turn on default spell checking

set spellcapcheck= " Disable checking for capitalization at the start of sentences during spell check

set ignorecase " ignore case during search

set smartcase " if search query contains uppercase, vim will switch to case sensitive search

set nobackup " Disable creating backup files (~ files) when saving

"set noswapfile " Disable creating swap files (.swp), which disables crash recovery

set directory^=$HOME/.vim/swapfiles// " store swapfiles in a custom location/directory

set nowritebackup " Disable creating temporary backup files during file writes

set icon " Sets the icon text for the Vim window (only affects gVim on X11 GUIs), might affect tmux titles

set scrolloff=8 " Keep at least 8 lines of context visible above and below the cursor while scrolling

set hlsearch " set highlight search hits

"set incsearch " displays the match when your only partially through typing it

"set linebreak " linebreak, if on wraps can occur at whatever breakat is

"let g:loaded_matchparen=1 " turns bracket matching off

"set showmatch " cursor quickly jumps to a matching bracket

set ttyfast " faster scrolling

"set path+=** " Sets up a way to do fuzzy finding. see max cantor's presentation

set wildmenu " Display all matching files when we tab complete

syntax enable " Set syntax on

" ##############################################################################
" key maps

let mapleader="," " set mapleader key

" nerdtree open/close toggle
nnoremap <LEADER>n :NERDTreeToggle<CR> 

" remap split window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k

" map Y to act the same way as D and C (in that it does the action to the end of line)
nnoremap Y y$

" map H to move to the beginning of the word
nnoremap H b

" map L to move to the end of the word
nnoremap L w

" mapping for function keys, the ! at the end before <CR> is to make it so you
" can toggle on and off
map <F1> :set number!<CR>
map <F2> :set relativenumber!<CR>

" add line after without going into insert mode
nnoremap <leader>o o<esc>k

" maps \\ to turn off search highlighting
nnoremap \\ :nohlsearch<return>

" ##############################################################################
" AUTOCMD

" make autocomple curly brackets in c
"autocmd FileType c,cpp inoremap { {<CR>}<Esc>O
autocmd FileType c,cpp inoremap <expr> <CR> getline('.') =~ '.*)$' ? "<CR>{<CR>}<Esc>O" : "<CR>"

" ##############################################################################
" end of vimrc
" ##############################################################################
